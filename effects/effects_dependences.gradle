def versions = [
        // android
        compileVersion        : 27,
        buildVersion          : '27.0.3',
        minVersion            : 16,
        targetVersion         : 27,
        effects_module_version: 100,
        effects_module_name   : '1.0.0',
        compatVersion         : JavaVersion.VERSION_1_8,
        support               : '27.1.1',
        constraint_layout     : '1.1.2',
        multidex              : '1.0.2',
        junit                 : '4.12',
        runner                : '1.0.2',
        espresso              : '3.0.2',

        // findbugs
        jsr305                : '3.0.2',

        // about detection
        leakcanary            : '1.5.4',
        nullAway              : '0.1.4',
        javax_extras          : '0.1.0',

        // architecture components
        lifecycle             : '1.1.1',
        room                  : '1.1.1',
        paging                : '1.0.1',
        navigation            : '1.0.0-alpha02',
        workmanager           : '1.0.0-alpha04',

        // rx
        rxjava                : '2.1.16',
        rxandroid             : '2.0.2',
        rxlifecycle           : '2.2.1',
        rxpermissions         : '0.9.5@aar',
        rxbinding             : '2.1.1',
        rxrequestor           : '1.0.5',

        // autodispose
        autodispose           : '0.8.0',

        // retrofit
        retrofit              : '2.4.0',

        // okhttp3
        okhttp                : '3.10.0',
        okio                  : '1.14.0',

        // store
        store                 : '3.1.0',

        // glide
        glide                 : '4.7.1',

        // fresco
        fresco                : '1.8.1',

        // picasso
        picasso               : '2.71828',

        // dagger
        dagger                : '2.15',

        // rabbits
        rabbits               : '1.0.0'
]

def test = [
        junit   : "junit:junit:${versions.junit}",
        runner  : "com.android.support.test:runner:${versions.runner}",
        espresso: "com.android.support.test.espresso:espresso-core:${versions.espresso}",
]

def findbugs = [
        jsr305: "com.google.code.findbugs:jsr305:${versions.jsr305}"
]

def detection = [
        leakcanary      : "com.squareup.leakcanary:leakcanary-android:${versions.leakcanary}",
        leakcanary_no_op: "com.squareup.leakcanary:leakcanary-android-no-op:${versions.leakcanary}",
        // refer to [https://github.com/uber/AutoDispose]
        errorProne      : [
                // http://errorprone.info/
                // http://errorprone.info/docs/installation
        ],
        nullAway        : [
                // for java project refer to [https://github.com/uber/NullAway]
                // only for android project
                nullAway: "com.uber.nullaway:nullaway:${versions.nullAway}"
        ],
        javax_extras    : [
                // https://github.com/uber-common/javax-extras
                javax_extras: "com.uber.javaxextras:javax-extras:${versions.javax_extras}"
        ]

        // errorProne, nullAway, java_extras usage refer to [AutoDispose](https://github.com/uber/AutoDispose)
]

def support = [
        support_v4       : "com.android.support:support-v4:${versions.support}",
        appcompat_v7     : "com.android.support:appcompat-v7:${versions.support}",
        recyclerview_v7  : "com.android.support:recyclerview-v7:${versions.support}",
        design           : "com.android.support:design:${versions.support}",
        support_v13      : "com.android.support:support-v13:${versions.support}",
        annotations      : "com.android.support:support-annotations:${versions.support}",
        constraint_layout: "com.android.support.constraint:constraint-layout:${versions.constraint_layout}",
        multidex         : "com.android.support:multidex:${versions.multidex}"
]

def arch = [
        lifecycle  : [
                // ViewModel and LiveData
                extensions     : "android.arch.lifecycle:extensions:${versions.lifecycle}",

                // alternatively - just ViewModel
                viewmodel      : "android.arch.lifecycle:viewmodel:${versions.lifecycle}",

                // alternatively - just LiveData
                livedata       : "android.arch.lifecycle:livedata:${versions.lifecycle}",

                // compiler
                compiler       : "android.arch.lifecycle:compiler:${versions.lifecycle}",

                // Java8 support for Lifecycle
                // alternately - if using Java8, use the following instead of compiler
                common_java8   : "android.arch.lifecycle:common-java8:${versions.lifecycle}",

                // optional - Test helpers for LiveData
                core_testing   : "android.arch.core:core-testing:${versions.lifecycle}",

                // optional - ReactiveStreams support for LiveData
                reactivestreams: "android.arch.lifecycle:reactivestreams:${versions.lifecycle}",

                // alternatively - Lifecycle only (no ViewModel or LiveData)
                // Support library depends on this lightweight import
                runtime        : "android.arch.lifecycle:runtime:${versions.lifecycle}",
        ],

        room       : [
                runtime : "android.arch.persistence.room:runtime:${versions.room}",
                compiler: "android.arch.persistence.room:compiler:${versions.room}",

                // optional - RxJava support for Room
                rxjava2 : "android.arch.persistence.room:rxjava2:${versions.room}",

                // optional - Guava support for Room, including Optional and ListenableFuture
                guava   : "android.arch.persistence.room:guava:${versions.room}",

                // Test helpers for Room
                testing : "android.arch.persistence.room:testing:${versions.room}",
        ],

        paging     : [
                runtime: "android.arch.paging:runtime:${versions.paging}",

                // alternatively - without Android dependencies for testing
                testing: "android.arch.paging:common:${versions.paging}",

                // optional - RxJava support for Paging, currently in alpha
                rxjava2: "android.arch.paging:rxjava2:${versions.paging}"
        ],

        navigation : [
                fragment: "android.arch.navigation:navigation-fragment:${versions.navigation}",
                ui      : "android.arch.navigation:navigation-ui:${versions.navigation}",

                // optional - Test helpers
                testing : "android.arch.navigation:navigation-testing:${versions.navigation}"
        ],

        workmanager: [
                runtime : "android.arch.work:work-runtime:${versions.workmanager}",

                // optional - Firebase JobDispatcher support
                firebase: "android.arch.work:work-firebase:${versions.workmanager}",

                // optional - Test helpers
                testing : "android.arch.work:work-testing:${versions.workmanager}"
        ]
]

def rx = [
        java                  : "io.reactivex.rxjava2:rxjava:${versions.rxjava}",
        android               : "io.reactivex.rxjava2:rxandroid:${versions.rxandroid}",
        lifecycle             : "com.trello.rxlifecycle2:rxlifecycle:${versions.rxlifecycle}",
        lifecycle_android     : "com.trello.rxlifecycle2:rxlifecycle-android:${versions.rxlifecycle}",
        rxlifecycle_components: "com.trello.rxlifecycle2:rxlifecycle-components:${versions.rxlifecycle}",
        permissions           : "com.tbruyelle.rxpermissions2:rxpermissions:${versions.rxpermissions}",
        binding               : "com.jakewharton.rxbinding2:rxbinding:${versions.rxbinding}",
        // General http request encapsulate base on Retrofit, OkHttp and RxJava
        requestor             : "com.artshell:RxRequestor:${versions.rxrequestor}"
]

def auto = [
        dispose     : "com.uber.autodispose:autodispose:${versions.autodispose}",
        android     : "com.uber.autodispose:autodispose-android:${versions.autodispose}",
        android_arch: "com.uber.autodispose:autodispose-android-archcomponents:${versions.autodispose}"
]

def retrofit = [
        retrofit         : "com.squareup.retrofit2:retrofit:${versions.retrofit}",
        adapter_rxjava2  : "com.squareup.retrofit2:adapter-rxjava2:${versions.retrofit}",
        converter_gson   : "com.squareup.retrofit2:converter-gson:${versions.retrofit}",
        converter_scalars: "com.squareup.retrofit2:converter-scalars:${versions.retrofit}",
        converter_moshi  : "com.squareup.retrofit2:converter-moshi:${versions.retrofit}",
]

def okHttp = [
        okhttp: "com.squareup.okhttp3:okhttp:${versions.okhttp}",
        okio  : "com.squareup.okio:okio:${versions.okio}"
]

def store = [
        cache3     : "com.nytimes.android:cache3:${versions.store}",
        store3     : "com.nytimes.android:store3:${versions.store}",
        middleware3: "com.nytimes.android:middleware3:${versions.store}",
        filesystem3: "com.nytimes.android:filesystem3:${versions.store}"
]

def glide = [
        glide_v4           : "com.github.bumptech.glide:glide:${versions.glide}",
        annotations        : "com.github.bumptech.glide:annotations:${versions.glide}",
        annotationProcessor: "com.github.bumptech.glide:compiler:${versions.glide}",
        okhttp3_integration: "com.github.bumptech.glide:okhttp3-integration:${versions.glide}"
]

def fresco = [
        fresco: "com.facebook.fresco:fresco:${versions.fresco}"
]

def picasso = [
        picasso: "com.squareup.picasso:picasso:${versions.picasso}"
]

def dagger = [
        dagger                            : "com.google.dagger:dagger:${versions.dagger}",
        annotation_dagger_compiler        : "com.google.dagger:dagger-compiler:${versions.dagger}",
        // If you're using classes in dagger.android you'll also want to include
        dagger_android                    : "com.google.dagger:dagger-android:${versions.dagger}",
        dagger_android_support            : "com.google.dagger:dagger-android-support:${versions.dagger}",
        annotation_dagger_android_compiler: "com.google.dagger:dagger-android-processor:${versions.dagger}"
]

def router = [
        rabbits : "com.kyleduo.rabbits:rabbits:${versions.rabbits}",
        compiler: "com.kyleduo.rabbits:compiler:${versions.rabbits}"
]

def misc = [
        multitype      : 'me.drakeet.multitype:multitype:3.4.4',
        gson           : 'com.google.code.gson:gson:2.8.2',
        spinkit        : 'com.github.ybq:Android-SpinKit:1.1.0',
        // https://github.com/aNNiMON/Lightweight-Stream-API
        stream         : 'com.annimon:stream:1.1.9',
        streamEx       : 'one.util:streamex:0.6.6',
        compressor     : 'id.zelory:compressor:2.1.0',
        reactivenetwork: 'com.github.pwittchen:reactivenetwork-rx2:0.12.3',
        prefser        : 'com.github.pwittchen:prefser-rx2:2.2.1',
        sqlbrite       : 'com.squareup.sqlbrite3:sqlbrite:3.2.0'
]

ext.deps = [
        "versions" : versions,
        "findbugs" : findbugs,
        "test"     : test,
        "detection": detection,
        "support"  : support,
        "arch"     : arch,
        "rx"       : rx,
        "auto"     : auto,
        "retrofit" : retrofit,
        "okHttp"   : okHttp,
        "store"    : store,
        "glide"    : glide,
        "fresco"   : fresco,
        "picasso"  : picasso,
        "dagger2"  : dagger,
        "router"   : router,
        "misc"     : misc,
]